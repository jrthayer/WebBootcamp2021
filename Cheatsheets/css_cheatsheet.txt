CSS(Cascading Style Sheets): the adjectives of web development. Provides 
    the visual represntation of the document.

    css Rules: basic pattern that defines css. (template below)
        +template: selector{
                        property: value;
                    }
        +syntax: semicolons need to be after all proper decleration!
        +casscade: styles are applied top down so styles applied or linked first 
            will be overridden by styles further down if specificity is equivalent. 
        +specificity: this is how browsers determine which selector should be applied
            when multiple selectors affect an element.
            +specificity calculation: 
                !important>inline>id>class,attribute,psuedoClass>type,psuedoElement
                +when specifcity is the same order matters. Last style defined is applied.    
        +inderitance: SOME css styles will be inherited by children if it isn't 
            defined by the child
            +values are inderited from closest relative.
            +keyword inherit is used to force a child to inherit values that 
                aren't done by default
            +
    Ways to include css:
        +inline: defined in html style attribute.(Very Few Use cases)
        +nested: defined in html tag element <style>
        +external: write styles in a .css file and include it with a <link> element
            in the head of the html document.(Standard Practice)

    Selectors:
        +types:
            +*{}: universal selector. 
                +selects all elments of a document.
            +element{}: element selector. 
                +style all instances of element selected. (h1, div, etc)
            +#idName{}: id selector. 
                +style unique element with idName value.
                +need # before name to indicate this is an id.
                +id should only be referencing one item on the pages
            +.className{}: class selector. 
                +apply style to all elements that have a class attribute
                    equivalent to className.
                +need . before className
                +className can/should be set on multiple elements
        +combinators:
            +selector , selector{}: 
                +apply styles to multiple selectors at once that are seperated
                    by a , .
            +selector selector{}: descendant selector.
                +select all elements that are inside the first selector
                    and match the second selector.
                +example: div a{}: select all a elements inside a div element
                +most commonly used with .class element{}
            +selector + selector{}: adjacent selector
                +select only elements that match the second selector that are 
                    immediately after elements that match the first selector
                +example: h1+p{}: select all p elements immediately after an h1 element
            +selector > selector{}: direct child selector
                + example div > p{}: select all p elements that are direct children
                of div elements. 
            +selector[attribute=value]{}: attribute selector.
                +input[type="radio"]{}: selects all input elements with type = radio. 
                +more types of this selector: https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors
        +pseudo classes: added to selectors for special states
            +selector:hover{}: element selected when cursor is over that element
            +selector:active{}: active selected element
                +examples: holding a click on it
            +selector:checked{} element selected that is checked
                +example: radio button that is clicked on
            +selector:nth-of-type(){} select specific instance of elements being selected.
                +example: h1:nth-of-type(2){} select second h1
                +example: h1:nth-of-type(3n){} select every third h1
        +pseudo elements: styles a specific part of an element
            +suppose to have :: but : does work and is often used mistakenly
            +selector::first-letter{} changes first character of each selected element.
            +selector::first-line{} "" first line ""
            +selector::selection{}change style when selector is being selected
            +selector::before{} creates a pseudo element before the selected element
            +selector::after{} "" after ""
    
    Properties:
        +color props:
            +background: modifies element background, does more than color.
            +background-color: sets background color.
            +color: changes text color.
        +text:
            +font-size: determines font size of text
                +size units:
                    +px = pixel. Doesn't necessarily equal width of eactly 1px
            +text-align: determine text orientation
            +font-weight: determineds text thickness depicted with words or numbers.
                +400 = normal, 700 = bold
            +text-decoration: adds a line to text
                +options:
                    +-line:orientation of line.(under, over, through)
                    +-color: color of line.
                    +-style: type of line(dashed, double, wavy)
                    +-thickness: thickness of line
            +line-height: determines height of line of text. 
                (example line-height: 2 would result in double spaced text)
            +letter-spacing: determines space between characters
            +font-family: sets font of text. 
                +can list several fonts in case the first font isn't available on the machine
                +fonts can be linked to pages with a font file
        +transitions: add animations to your styling
            +Properties:
                +time: how long it takes for style to change from A to B.
                +property-name: which property you want to transition.
                +timing-function: defines tranistion type. 
                    +https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function
                +delay: how long to wait before transition starts.
        +transform: 
            +will transform all elements inside element being transformed.
            +types:
                +rotate, scale, translateX, translateY
            +origin: where to tranform the element from. Usually defaults to center of element.
        +background:
            +size can only be included immediately after position

    css Colors:
        +named: 140 colors have an english name associated with them.
        +rgb(red,green,blue): additive color system
            +has three color channels(in order): red, green, blue
            +value of each channel can range from 0-255
        +hexadecimal: still rgb but represents 0-255 using hex numbering
            +example #ff03ab(red=ff,blue=03,green=ab)
            +most commonly used color indicator
            + single digit hexvalues are valid if each first number of each channel 
            is the same as their second. example(#fa4 == #ffaa44)
        +Opacity & Alpha Cheannel:
            +aplha(rgba): how transparent a color is.
                +range 0-1(completely transparent)-(not transparent)
                    +00-ff on hex value color
                +only affects the property being defined.
            +Opacity(attribute): how transparent an element is.
                +range 0-1(completely transparent)-(not transparent)
                +affects the entire element applied to.

    Box Model Properties:
        +width/height: set's an elements width/height
        +border: sets a border around an element.
            +by default border isn't included in the width.
            +setting box-sizing: border-box; will include border width in the element's width.
            +takes three values: width, style, color.(order doesn't matter)
            +example: border: red 2px solid;
            +border-radius: rounds corners of border.
        +padding: space between element content and border. top is always first!
        +margin: space outside of border and between other elements. top is always first!
            +body has a default margin of 8px;
        +display: 
            +types:
                +none: takes up no space and can't be seen.
                +inline: elements can be side by side.
                    +width&height properties are ignored.
                    +margin&padding seperate elements horizontally but not vertically.
                +block: elements take up entire line of space.
                    +respects width, height, margin & padding properties.
                    +auto fills the line
                    +Warning: margin collapsing!!!!!
                        +https://cmichel.io/css-margin-top-not-working 
                +inline-block: works like inline but respects width, height, margin & padding properties.
        +position: sets how an element is positioned in a document.
            +Types: determines how top, right, bottom, left, z-index properties function. 
                +static(default value): normal flow of document. Above properties have no effect.
                +relative: moves relative from default positon using above properties.
                +absolute: moves relative from closest absolute positioned relative.
                    +defaults to body, unless a closer parent has defined position:absolute.
                +fixed: The element is removed from the normal document flow 
                    +no space is created for the element in the page layout
                    +It is positioned relative to the initial containing block established by the viewport 
                        +EXCEPTION: Will be relative to ancestor if it has one of the 
                        following is set to something other than none: 
                            +transform
                            +perspective
                            +filter 
    
    css Units:
        +absolute
            +px = pixel. Doesn't necessarily equal width of eactly 1px.
        +relative
            +% = percentage. percentage of a value relative to itself or a parent.
                +example: width: 50%; //Sets width to 50% of the parent elements width.
                +example: line-height: 50%; //half the font-size of the element itself.
            +em = Font size of the parent, in the case of typographical properties like font-size. 
                +font size of the element itself, in the case of other properties like width.
                +common issue: em property can compound itself on nested elements.
                    +p p where p{font-size: 2em}. would result 
                    in the first p being 2x and the second p being 4x
            +rem = Font size of the root element.(<HTML>)
    
    css whitespace:
        +there are whitespace characters between html objects not on the same line
        +this character does take up space and will through off by hand width calculations
            +<h1></h1><h1></h1> 
                Is not the same as 
            +<h1></h1>
             <h1></h1>

    Resources:
        +all css properties: https://developer.mozilla.org/en-US/docs/Web/CSS/Reference
        +font family support: https://www.cssfontstack.com/
        +margin collapsing: 
            +https://cmichel.io/css-margin-top-not-working
            +https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing
        +google fonts: https://fonts.google.com/
