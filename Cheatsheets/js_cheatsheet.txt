JavaScript: scripting language used in web development. 
    Makes dynamic changes to the document.

    Comments: are done with // at the beginning of the line you want to be
        a comment.

    Linking a js file:
        +use a <script> html element with a src attribute set to js file.
            +example: <script src="app.js"></script>
        +usually place scripts at the end of body so the html elements are  
            loaded before the script runs!!!!!!

    Primitives:
        +number: js has only ONE number type.
            +doesn't matter if the number is whole, floating, negative, or positive
            +there is a limit of memory a number can take up
            +js mathmatically follows order of operations(PEMDAS)
            + x ** y = x to the power of y
            +NaN = Not a Number(is a valid number VALUE). 
                +represents a result that is not a number.
                + examples ---> 0/0 = NaN. 1 + NaN = NaN.
        +string:
            +format: need to be wrapped in " " or ' '.
            +numbers inside '' are a string not a number.
                +var x = "22" + "33" ---->> "2233"
            +to use quotes inside a string use the other ""/''
                +var quote = 'she said, "hello!"'
            +strings are indexed. every character in the string has an index.
                +index starts at 0
                +var cat = "Felix"; cat[1] ---> "e";
                +.length returns the number of indexes. .length is a property.
                +string methods: built in string actions
                    +format: stringName.methodName()
                +string template literals: allow strings to have embedded expressions!
                    +have to use `` as the string quotes
                    +expression format: ${expression}
                    +examples:
                        +`I have ${5+6} cups` --> "I have 11 cups"
        +boolean: true or false.
        +null:
            +"Intentional absence of any value"
            + must be assigned!!!
        +undefined
            +variables that do not have an assigned value

    Variables: references a value with a name.
            +example var Name = value;
        +Defined with var, let, or const data type.
            +var is function scoped and let is block scoped.
                It can be said that a variable declared with var is defined 
                throughout the program as compared to let.
            +const works like let but CANNOT change value;
            +let and const are the newer types, var does not need to be used
        +variables are not type set! Any variable can be any value. 
            +This includes things like functions!?!
        +naming convertions
            +variable names cannot start with a number. 
            +camelCase
            +snake_case

    Boolean Logic:
        +comparison operators:
            + > greater than
            + < less than
            + >= greater than OR equal
            + <= less than OR equal
                +equality operators
                    + == double equals(values compared but not type)
                        + 22 == "22" ---> true
                    + === triple equals(values and type are compared)
                        + 22 === "22" ---> false
                    + != not equal
                        + 22 != "22" ---> false
                    + !== not strictly equal
                        + 22 !== "22" ---> true
    Truthy and Falsy:
        +every value is truthy or falsy
            +all values are truthy except:
                +false
                +0
                +""(empty string)
                +null
                +undefined
                +NaN(Not a Number)

    Logical operations: combine expressions values
        +&& AND operator: results in true if all expressions are true, false otherwise
        +|| OR operator: results in true if either expression is true
        +!  NOT operator: returns the opposite value of an expression

    Conditional statements:
        +if statement: if the expression in () is true runs code inside { } 
            +example: 
                var x = 2;
                if(x === 2){ console.log("x is the number 2!!!");}; 
        +else if statement: if the previous if statement is false this if statement
            +has to be after an if statement
        +else statement: if all precedding if statements are false run the code inside{}
            +example:
                var x = 2;
                if(x === 1){console.log("x is the number 1!!!");}
                else{console.log("x is not the number 1!!!");}
        +conditional statements can be nested inside of conditional statements
    
    Math Object: is a built-in object that has properties and methods for mathematical constants and functions. Itâ€™s not a function object.
        Math works with the Number type. It doesn't work with BigInt.

    Data Structures: a collection of data.
        +Arrays: ORDERED collections of values.
            +creating an array: let arrayName = [];
            +arrays are not type specific and therefore can have several different 
                primitive types in the same array. 
            +each element in the array has an index.
            +Methods:
                +.length: how many elements are in the array.
                +.push(value): add value to end of array.
                +.pop(): remove last element of array.
                +.shift(): remove element from start of array.
                +.unshift(value): add element to start of array.
                +.concat(array): add another array to an array.
                +.includes(value): returns true if the array contains value.
                +.indexOf(string): return index that matches the string value. Returns -1 if 
                    no matches are found.
                +.reverse(): reverses the array. Last element becomes first, first 
                    becomes last. Converts array that calls the function.(destructive method)
                +.slice(): copies a portion of an array.
                +.splice(): removes/replaces elements.
            +const?: if you "set an array" to const you can edit the contents of 
                the array because const is making the name constantly set to the address of 
                the array, not making the array content constant.
            +arrays can be nested
        +Object Literals: collection of properties that are key-value pairs.
            +why not just Object?: Object has more meaning than just a data structure in js.
            +create: const objectName = {firstKey: value1, secondKey: value2 };
                +using const cause you don't usually point to a different object
            +accessing data:
                +all key values are converted to a string(except for symbols). 
                +object["keyName"]: need to use "" around key name.
                    +object[] needs an expression so you can use a variable in the []. Useful for dynamic key access.
                +object.keyName: does not use "".
            +adding/updating:
                +updating: object.keyName = new key value;
                +adding: object.keyName = value; If the property doesn't exist it will be added.   
                    +can also use [] notation instead
            +working with arrays:
            +objects can be nested:
                + const object = {nestedObject: {key1: value1} };
            +objects can be stored in arrays and vice versa
            +not iterable! Like an array or string.
                +can iterate over them by:
                    +using a for...in loop
                        +get property values as an array using Object class:
                            +Object.key(object) -> gives array of the keys
                            +Object.values(object) -> gives array of the values
                    
    Loops: allows you to repeat the same section of code. 
        +Types:
            +for:
                +syntax: 
                    for(
                        [initialExpression];
                        [condition];
                        [incrementExpression];
                    )
                    +incrementExprssion can be other modifiers like -- or x/2.   
                +example: 
                    for(let x = 0; x < 10; x++){
                            //repeated code here
                            console.log(x);
                        }
                +iterating over an array:
                    for(let x = 0; x < array.length; x++){
                        console.log(array[x]);
                    }
                +for...of
                    +easy syntax to go over an array or iterable objects in general
                    +for(let item of iterableObject)
                    +not supported by IE
            +while: used for loops that are variable.
                +syntax:
                    while([condition]){
                        //code
                        [modify testing value];
                    }
                +very easy to have infinite loops since the logic to meet the condition isn't defined in the loop syntax.
                +break keyword: if runs stops the loop currently running. Not parent loops just current loop.
        +Infinite Loops: If the loop condition is never false the loop runs until the application crashes or freezes.
        +nested loops: loops can be nested.

    Functions: reusable chunks of code that can be ran by using their defined name.
       +functions are objects behind the scenes. They can be used and passed around like a variable.
       +function statement: declare function with function and name.
            +define/syntax:
                +function funcName(){
                    //code to be ran
                }
            +execute:
                +funcName(); //runs the function with name funcName
        +function expression: store/declare function in a variable.
            +define/syntax:
                +let variable = function(x,y){
                    return x+y;
                }
            +execute:
                variable(3,4); => returns 7;
        
        +arguments: variables defined inside the () that are passed into and used in the function.
        +return: return value; Ends function and returns the value from the function. 
        +scope: where a variable is defined and accessable.
            +function scope: variables defined inside a function can only be used/exist in that function.
                +local scope is used over global scope for objects with same name. 
            +block scope: variables defined inside a block(in between { } but not a function) can only be used/exist in that block.
                +this is not the case with var variables, vars are function scoped.
            +lexical scope: nested functions can access variables defined in their parent functions, but not their children functions.
                +stackoverflow explanation: https://stackoverflow.com/questions/1047454/what-is-lexical-scope
        +Higher Order Functions: functions that make use other functions, either accepting functions as arguments or returning functions.
        +keyword this: this is a reference to the parent object of the object that this is being called on. 
            +So inside a method of an object this returns the object containing that method, but outside the method this refers to the parent object of the object which is window. 

    Method: is a function that is a property of an object.
        +objectName.methodName()
        +define:
            let object = {
                square: function(num){
                    return num * num;
                },
                cube: function(num){
                    return num ** 3;
                }  
            }
            +shortHand Method:
                let object = {
                    square(num){
                        return num * num;
                    },
                    cube(num){
                        return num ** 3;
                    }  
                }
    
    Try/Catch: used to handle errors.
        try{
            //run this code
        }
        catch(e){
            //e is the error that is being caught
            //run this code if there was an error
        }

    Resources:
        +Math Object: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math

                
    
