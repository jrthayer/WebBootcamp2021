JavaScript: scripting language used in web development. 
    Makes dynamic changes to the document.

    Comments: are done with // at the beginning of the line you want to be
        a comment.

    Linking a js file:
        +use a <script> html element with a src attribute set to js file.
            +example: <script src="app.js"></script>
        +usually place scripts at the end of body so the html elements are  
            loaded before the script runs!!!!!!

    Primitives:
        +number: js has only ONE number type.
            +doesn't matter if the number is whole, floating, negative, or positive
            +there is a limit of memory a number can take up
            +js mathmatically follows order of operations(PEMDAS)
            + x ** y = x to the power of y
            +NaN = Not a Number(is a valid number VALUE). 
                +represents a result that is not a number.
                + examples ---> 0/0 = NaN. 1 + NaN = NaN.
        +string:
            +format: need to be wrapped in " " or ' '.
            +numbers inside '' are a string not a number.
                +var x = "22" + "33" ---->> "2233"
            +to use quotes inside a string use the other ""/''
                +var quote = 'she said, "hello!"'
            +strings are indexed. every character in the string has an index.
                +index starts at 0
                +var cat = "Felix"; cat[1] ---> "e";
                +.length returns the number of indexes. .length is a property.
                +string methods: built in string actions
                    +format: stringName.methodName()
                +string template literals: allow strings to have embedded expressions!
                    +have to use `` as the string quotes
                    +expression format: ${expression}
                    +examples:
                        +`I have ${5+6} cups` --> "I have 11 cups"
        +boolean: true or false.
        +null:
            +"Intentional absence of any value"
            + must be assigned!!!
        +undefined
            +variables that do not have an assigned value

    Variables: references a value with a name.
            +example var Name = value;
        +Defined with var, let, or const data type.
            +var is function scoped and let is block scoped.
                It can be said that a variable declared with var is defined 
                throughout the program as compared to let.
            +const works like let but CANNOT change value;
            +let and const are the newer types, var does not need to be used
        +variables are not type set! Any variable can be any value. 
            +This includes things like functions!?!
        +naming convertions
            +variable names cannot start with a number. 
            +camelCase
            +snake_case

    Boolean Logic:
        +comparison operators:
            + > greater than
            + < less than
            + >= greater than OR equal
            + <= less than OR equal
                +equality operators
                    + == double equals(values compared but not type)
                        + 22 == "22" ---> true
                    + === triple equals(values and type are compared)
                        + 22 === "22" ---> false
                    + != not equal
                        + 22 != "22" ---> false
                    + !== not strictly equal
                        + 22 !== "22" ---> true
    Truthy and Falsy:
        +every value is truthy or falsy
            +all values are truthy except:
                +false
                +0
                +""(empty string)
                +null
                +undefined
                +NaN(Not a Number)

    Logical operations: combine expressions values
        +&& AND operator: results in true if all expressions are true, false otherwise
        +|| OR operator: results in true if either expression is true
        +!  NOT operator: returns the opposite value of an expression

    Conditional statements:
        +if statement: if the expression in () is true runs code inside { } 
            +example: 
                var x = 2;
                if(x === 2){ console.log("x is the number 2!!!");}; 
        +else if statement: if the previous if statement is false this if statement
            +has to be after an if statement
        +else statement: if all precedding if statements are false run the code inside{}
            +example:
                var x = 2;
                if(x === 1){console.log("x is the number 1!!!");}
                else{console.log("x is not the number 1!!!");}
        +conditional statements can be nested inside of conditional statements
    
    Math Object: is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.
        Math works with the Number type. It doesn't work with BigInt.

    Data Structures: a collection of data.
        +Arrays: ORDERED collections of values.
            +creating an array: let arrayName = [];
            +arrays are not type specific and therefore can have several different 
                primitive types in the same array. 
            +each element in the array has an index.
            +Methods:
                +.length: how many elements are in the array.
                +.push(value): add value to end of array.
                +.pop(): remove last element of array.
                +.shift(): remove element from start of array.
                +.unshift(value): add element to start of array.
                +.concat(array): add another array to an array.
                +.includes(value): returns true if the array contains value.
                +.indexOf(string): return index that matches the string value. Returns -1 if 
                    no matches are found.
                +.reverse(): reverses the array. Last element becomes first, first 
                    becomes last. Converts array that calls the function.(destructive method)
                +.slice(): copies a portion of an array.
                +.splice(): removes/replaces elements.
            +const?: if you "set an array" to const you can edit the contents of 
                the array because const is making the name constantly set to the address of 
                the array, not making the array content constant.
            +arrays can be nested
            +Callback Methods: array methods that require functions(callback function) to be past in.
                +All of these do ALOT of stuff behind the scenes, need to KNOW a lot to use it, read documentation. Not a big fan personally!!!
                +forEach: calls function on each element in the array.
                    +syntax
                        array.forEach(function);
                    +inline:
                        array.forEach(function(num){
                            console.log(num);
                        }); 
                    +MDN:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
                +map: calls function on each element and returns a new array with changes.
                    +let array2 = array.map(function);
                +filter: creates a new array with all elements that return true;
                    +let passed = array.filter(element => element.score >= 70);
                +Some/Every: returns true/false after testing all elements 
                    +every: returns true if all elements return true;(AND)
                        +syntax let bool = array.every(element => element < 80);
                    +some: returns true if any element returns true;(OR)
                +Reduce: Take an array and reduce it to a single value.
                    +syntax: array.reduce((accumulator, currentValue) => {
                        return accumulator + currentValue;
                    });
                    +does not need to be math, the important thing is the accumulator value is saved and passed to next test.
                    +mdn: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce
        +Object Literals: collection of properties that are key-value pairs.
            +why not just Object?: Object has more meaning than just a data structure in js.
            +create: const objectName = {firstKey: value1, secondKey: value2 };
                +using const cause you don't usually point to a different object
            +accessing data:
                +all key values are converted to a string(except for symbols). 
                +object["keyName"]: need to use "" around key name.
                    +object[] needs an expression so you can use a variable in the []. Useful for dynamic key access.
                +object.keyName: does not use "".
            +adding/updating:
                +updating: object.keyName = new key value;
                +adding: object.keyName = value; If the property doesn't exist it will be added.   
                    +can also use [] notation instead
            +working with arrays:
            +objects can be nested:
                + const object = {nestedObject: {key1: value1} };
            +objects can be stored in arrays and vice versa
            +not iterable! Like an array or string.
                +can iterate over them by:
                    +using a for...in loop
                        +get property values as an array using Object class:
                            +Object.key(object) -> gives array of the keys
                            +Object.values(object) -> gives array of the values
                    
    Loops: allows you to repeat the same section of code. 
        +Types:
            +for:
                +syntax: 
                    for(
                        [initialExpression];
                        [condition];
                        [incrementExpression];
                    )
                    +incrementExprssion can be other modifiers like -- or x/2.   
                +example: 
                    for(let x = 0; x < 10; x++){
                            //repeated code here
                            console.log(x);
                        }
                +iterating over an array:
                    for(let x = 0; x < array.length; x++){
                        console.log(array[x]);
                    }
                +for...of
                    +easy syntax to go over an array or iterable objects in general
                    +for(let item of iterableObject)
                    +not supported by IE
            +while: used for loops that are variable.
                +syntax:
                    while([condition]){
                        //code
                        [modify testing value];
                    }
                +very easy to have infinite loops since the logic to meet the condition isn't defined in the loop syntax.
                +break keyword: if runs stops the loop currently running. Not parent loops just current loop.
        +Infinite Loops: If the loop condition is never false the loop runs until the application crashes or freezes.
        +nested loops: loops can be nested.

    Functions: reusable chunks of code that can be ran by using their defined name.
        +functions are objects behind the scenes. They can be used and passed around like a variable.
       +arguments object: each function has an arguments object that can be accessed like an array.
            +contains all arguments passed to the function.
            +not available inside arrow functions
       +function statement: declare function with function and name.
            +define/syntax:
                +function funcName(){
                    //code to be ran
                }
            +execute:
                +funcName(); //runs the function with name funcName
        +function expression: store/declare function in a variable.
            +define/syntax:
                +let variable = function(x,y){
                    return x+y;
                }
            +execute:
                variable(3,4); ========> returns 7;
            +Arrow Functions: shorthand for function expression. Not supported by IE.
                +syntax:
                    +(parameter1, parameter2) => {return parameter1 * parameter2}
                +implicit returns: can compact even more... Only work if there is one expression in the function.
                    +(parameter1, parameter2) => parameter1 * parameter2;
                +keyword this: maintains scope of where it was created. 
    
        +arguments: variables defined inside the () that are passed into and used in the function.
        +return: return value; Ends function and returns the value from the function. 
        +scope: where a variable is defined and accessable.
            +function scope: variables defined inside a function can only be used/exist in that function.
                +local scope is used over global scope for objects with same name. 
            +block scope: variables defined inside a block(in between { } but not a function) can only be used/exist in that block.
                +this is not the case with var variables, vars are function scoped.
            +lexical scope: nested functions can access variables defined in their parent functions, but not their children functions.
                +stackoverflow explanation: https://stackoverflow.com/questions/1047454/what-is-lexical-scope
        +Higher Order Functions: functions that make use other functions, either accepting functions as arguments or returning functions.
        +keyword this: is determined by EXECUTION order not scope. Essentially this is the object that is currently executing.
            So a object using this will be window since window is executing this, but a method inside an object this will be the object because the object is calling the method.
            
            +my original understanding: this is a reference to the parent object of the object that this is being called on. 
            +So inside a method of an object this returns the object containing that method, but outside the method this refers to the parent object of the object which is window.
         
    Method: is a function that is a property of an object.
        +objectName.methodName()
        +define:
            let object = {
                square: function(num){
                    return num * num;
                },
                cube: function(num){
                    return num ** 3;
                }  
            }
            +shortHand Method:
                let object = {
                    square(num){
                        return num * num;
                    },
                    cube(num){
                        return num ** 3;
                    }  
                }
    
    Try/Catch: used to handle errors.
        try{
            //run this code
        }
        catch(e){
            //e is the error that is being caught
            //run this code if there was an error
        }

    Time altered functions:
        +setTimeout: delays a function call to a later timeframe.
            +syntax:
                setTimeout(function(){}, timeToDelay(in ms));
        +setInterval: calls a function every set amount of ms.
            +syntax:
                const id = setInterval(function(){}, interval);
                +returns id of interval being run.
            +how to stop interval:
                clearInterval(id);

    Newer JS Features:
        +default params: if a parameter isn't provided set it to a default value.
            +syntax: function name(a, b = 1){ //b defaults to 1 if not passed in}
            +order matters!!!
            +not supported by IE
        +Spread: spreads an iterable to be expanded in places where zero or more arguments/elements are expected.
            +syntax: ...Array ----> results in passing the individual elements.
            +this works on anything you can iterate over: strings, arrays, object literals
            +very useful for copying arrays or objects
        +Rest: same syntax as spread but is placed in a functions attribute area when defining a function. 
            Instead of spreading an iterable it takes all arguments and places them in array.
            +syntax: function test(first, second, ...rest){}
        +Destructing: unpacks values from arrays, properties from objects into variables
            +array syntax: 
                let array = [1,30,40,5];
                let [first, second, third] = array;
                //creates variables: first = 1, second = 30, third = 40
            +object syntax:
                let object = {
                    email: 'ad;fa@gmail.com',
                    firstName: 'Bob',
                    lastName: 'Teader'
                }
                let {email, firstName, lastName} = object;
                //creates variables: email = 'ad;fa@gmail.com', firstName = 'Bob'
                +you can rename variables of object keys with :
                    +example: 
                        let {email, firstName: first, lastName: last} = object;
                        //creates variables: email = 'ad;fa@gmail.com', first = 'Bob'
                +can use default values:
                        let {email, firstName: first, lastName: last = 'doe'} = object;
                        //if lastName isn't defined set variable last = 'doe';
            +parameter:
                syntax: function fullName({firstName :first, lastName: last = 'doe'}){

                }
            +can be used with rest
                let array = [1,30,40,5];
                let [first, ...rest] = array;
                 //creates variables: first = 1, rest = [30,40,5]

    DOM(Document Object Model): is a javaScript representation of a webpage. A bunch of js Objects that can be manipulated.
        +Document Object: Every html tag becomes a js object. The top most object(root of the tree) is the document object.
            +these objects are stored in a tree structure, with children objects(tags inside other tags) branching off from parents.
            +console.dir(document) --> shows all the attributes that are associated with the document object of the page
        +Selecting DOM elements: using js to select specific objects from the DOM.
            +Elements: https://developer.mozilla.org/en-US/docs/Web/API/Element
            +old selectors:
                +document.getElementById('idName'): returns element object with idName if it exists, null if it does not.
                +htmlColletctions: Set of element objects. Looks like an array but is not. Can iterate over them.
                    +document.getElementsByTag('tag'): returns HTML collection with all 'tags' elements in the document.
                    +document.getElementsByClassName('class'): returns HTML Collection with all 'classes' elements in the document.
            +newer selectors: SO MUCH Better!
                +querySelector('css Selector'): returns the first element that matches the selector, returns null if no matches found.
                +querySelectorAll('css Selector'): returns all elements that match the selector in a Node List!!!
        +Manipulating DOM elements:
            +element.innerText = 'string': only shows “human-readable” elements.
                +since innerText takes CSS styles into account, reading the value of innerText triggers a reflow to ensure up-to-date computed styles. 
                (Reflows can be computationally expensive, and thus should be avoided when possible.)
            +element.textContent = 'string': gets the content of all elements, including <script> and <style> elements. 
            +element.innerHTML = gets or sets the HTML or XML markup contained within the element;
            +Attributes:
                +element.'attributeName': gets value from js. Post computed value.
                +element.'attributeName' = value: sets value.
                +getAttribute('name'): gets the text from html. Pre computed value.
                +setAttribute('name', 'value'): sets attribute value.
                +difference Between: https://stackoverflow.com/questions/3919291/when-to-use-setattribute-vs-attribute-in-javascript
                    +So you only need to use setAttribute for non-standard attributes.
            +Styles: styles in js are camelCase not -, so fontSize not font-size;
                +element.style."styleName" = the INLINE style values of the document.
                +can get current cs values elements with window.getComputedStyle(h1).color
                +better to use classes to change styling
                +element.classList = list of classes on element, has many methods to manipulate classes.
                +element.classList.add(): adds classes to element
                +element.classList.remove(): removes classes from element
                +element.classList.toggle(): adds class if it exists, removes if class does not.
            +Traverse Relatives:
                +element.parentElement = returns parent element.
                +element.children = returns HTMLCollection of children... ugh! Can be indexed/iterated NOT AN ARRAY!!!
                +element.previousSibling = give prev adjacent element including whitespace/text nodes.
                +element.nextSibling = give next adjacent element including whitespace/text nodes.
                ++element.previousSiblingElement = give prev adjacent element ignoring filler.
                +element.nextSiblingElement = give next adjacent element ignoring filler.
            +Creating Element:
                +document.creatElement('tagName');
            +Adding Elements:
                +element.appendChild(newElement); adds newElement to the element. 
                +element.append(newElement/text); same as above but allows for DomStrings, multiple nodes at the same time, and has no return value.
                +element.prepend(newElement/text); adds newElement as first child of element
                +element.insertAdjacentElement(target, newElement); insert newElement adjecent to element before or after. Can also put inside but can just use the above functions. 
                +element.after(newElement); inserts newElement adjacent after element.
                +element.before(newElement); inserts newElement adjacent before element.
            +Removing Elements:
                +element.removeChild(childElement); remove child of parent element.
                +element.remove(); remove element calling this method. 
    
    Events: detecting and responding to user input.
        +Ways to add events:
            +html inline events(not generally used): <tag onclick = "function">, <tag ondbclick = "function"> 
            +event property: element.eventProperty = function;
                +list of available: https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers
            +element.addEventListener('eventType', function); //BEST To USE
                +allows multiple functions to be attached to the same event and allows functions to be removed from events. 
                +list of eventTypes: https://developer.mozilla.org/en-US/docs/Web/Events#event_index
        +keyword 'this' and events: inside an eventListener callback 'this' refers to the element with the callback attached.
        +event object: every function triggered by an event is passed an event object by default. 
            +this is one of the things that makes js so hard to read without knowing everything in advance!!!
            +example:
                document.body.addEventListener('click', function(e){
                    //this function handler is passed the event object and does not take custom arguments.
                    //instead you call your function inside the handler function.
                    console.log(e);
                })
            +the values in this element is based on the type of event being triggered. Clicking a keyboard key reutrns a keyboardEvent element.
        +PreventDefault: inside callback of eventListener event.preventDefualt();
            +this is called on the event object and prevents the default callback actions from occuring
        +form events:
            +submit: called when a form is submited.
            
            +forms elements contain an object that holds all their children called elements,
                +if the elements have names they can be accessed with that name, form.elements."elementName"
                +not sure why this is brought up during events but it is.
        +Input events:
            +change: called when an input value is unfocused(blur?) and different from before.
            +input: called whenever the input value changes.
        +Bubbling: events start with deepest child and work back through parents.
            +so when you click a button inside a div, the button click event will fire and then the parent div click event will fire.
            +event.stopPropegation(): stops "bubbling"
        +Delegation:  The process of using event propagation to handle events at a higher level in the DOM than the element on which the event originated
            +event.target: returns the element that originated the event firing.

    Async:
        +The Call Stack: mechanism that the JS interpreter uses to determine it's place in a script.
            +last in, first out.
            +each function that a script reaches is added to the stack, if the function calls another function that function will be added to the stack 
                and run first before the parent function.
            +you can test the stack using the sources tab in the chrome inspector
                +clicking on a function will add a break point stoping the js script when it gets to that point when you refresh the page.
        +JS is single thread, which means at any given time JS can only run one line of code.
            +But the browser isn't, so JS hands off tasks to the browser to handle, like timeouts or requests.(These are web APIs)
                +The browser waits till the callback conditions are meet and then tell JS to run the function.
        +Callback Hell: having lots of nested callbacks, cluttering code and making the syntax messy.
            +Common for each request to have a success callback and a failure callback, which can then have nested success/failure and so forth.
                +This is what causes Callback Hell, a shortcoming of old JS.
        +Promise: an object representing the eventual completion or failure of an asynchronous operation.
            +A solution to callback hell,
            +promise has three states: pending, resolved, rejected.
            +syntax:
                +new Promise(function(resolve, reject){
                    //if resolve is ran, the promise becomes "resolved"
                    //if reject is ran, the promise becomes "rejected"
                });
                +promise.then(function()): function that runs when a promise is resolved.
                +promise.catch(function()): function that runs when a promise is rejected.
            +promise chaining: promise.then() can be chained by returning a promise.       
        +Async Functions: cleaner syntax for promises!
            +Async:
                +syntax:
                    +async function functionName(){}
                +always returns a promise.
                +if the function returns a value, the promise will be resolved with that value.
                +if the function has an error the promise is rejected 
                +rejection:
                    +using try/catch will allow you to catch errors
                    +try{
                        //run your code here
                    }   
                    catch(e){
                        //e is the error that occured
                        console.log(e);
                    }
            +Await: The await expression causes async function execution to pause until a Promise is settled (that is, fulfilled or rejected), and to resume execution of the async function after fulfillment.
                +await functionName() ---> where functionName is an async function
        +Stack Visualization: http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D 

    +Actual Requests!!!!
        +


    Resources:
        +Math Object: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math
        +All Things Events: https://frontend.turing.edu/lessons/module-1/js-event-bubbling-and-delegation.html?ads_cmpid=6451354298&ads_adid=76255849919&ads_matchtype=b&ads_network=g&ads_creative=378056926252&utm_term=&ads_targetid=dsa-19959388920&utm_campaign=&utm_source=adwords&utm_medium=ppc&ttv=2&gclid=CjwKCAjwruSHBhAtEiwA_qCppp8EuCg8IlqSsRf_jOgzx-I13EM358dDLHu-WApPi5F_V6GiJSn6wxoC_YIQAvD_BwE
                
    
