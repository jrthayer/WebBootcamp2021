Backend: Server side development.

    Command Line/Terminal:
        +Terminal: A text-based interface to your computer.
        +Shell: Software running the text-based interface. (unix is the os kinda)
            +Bash: popular shell used on mac
            +zShell(zsh): newer shell on mac
            +windows default shell runs MS Dos instead of Unix.
            +gitBash: bash shell for windows.
                +src: https://git-scm.com/downloads
                +includes: Bash and Git support.
        +Bash Commands:
            +ls: show files and directories in current dir.
            +pwd: displays current directory
            +cd: changes directory.
            +mkdir: makes directory(also known as a folder).
            +touch: creates files.
            +rm: removes files.
            +rmdir: removes directory.
            +<command name> --help:gives information on command(like flags). 
            +<command name> -flag: flags are arguments for shell commands.
        +Relative vs Absolute Paths:
            +Relative: path relative to current directory.
            +Absolute: / before path since / is the root directory.
                +path is can be done anywhere since it is a strict path starting at root dir.
        +Notes:
                + ~ === home directory.
                + / === root directory.
    
    NodeJS: a JavaScript runtime. An implementation of JS that can be run outside the browser.
        +What people use it for:
            +Web Servers
            +Command Line Tools
            +Native Apps(VSCode is a Node App)
                +Using Electron
            +Video Games
        +Installation: go to their website...
        +Node REPL: sandbox that is running/interpreting js.
            +doesn't have any of the browser stuff like the window DOM object.
            +accessed by running 'node' in the bash.
            +exit with .exit
        +Running a js file: $node filename.js
        +getting arguments:
            +syntax: $node file.js arg1 arg2 arg3
                    //inside file.js below
                    console.log(process.argv.slice(2));
        +Module/Files:
            +require:
                +add file:
                    //this will make a js file require another file
                    let object = require("./math");
                +adding directory:
                    +need to have an index.js file inside the directory you want to add
                        +the index file will require the js files that you want included and add it to export.
                    +let object = require("./directory");
                    +node will then look for index.js automatically and add the exported info.
            +making a module:
                +create a js file and add necessary parts to module.exports.whateverYouAreAdding.
                +exports is a shortcut for module.exports as long as exports hasn't been defined.
                    +doesn't work for object, need to use module.exports = {}
            +NPM(Node Package Manager): standardized library of packages and a command line tool to install them.
                +install:
                    +syntax:
                        +npm install packageName
                            +package names can be found in the NPM Registry
                            +install can be substituted with i
                    +local vs global:
                        +by default install will install the module locally, meaning only files inside that directory can use them.
                        +to install globally include -g, this adds it to the node module library folder instead of the local directory.
                            +global is generally only used for command line modules
                    +package.json: contains meta-data about the module.
                        +npm init 
                            +will prompt you to fill out the info needed for the package.json
                        +when you install module and have a package.json it's name and version will be added automatically to the dependacy section.
                            +this is useful so that you can keep track of what modules and versions you need for your project.
                        +found in the root directory of the project
                        +npm install 
                            +will look into the package.json and install all modules needed.

    Express: a web development framework for Node.js. Creating actual web servers!
        +Starts up a server.
        +Parse incoming requests.
        +Match those request to routes.
        +Craft our http response and related content.
        +Library vs Framework:
            +both are sets of code that add functionality to an existing code base.
            +Library is generally a set of functions/methods that can be used where we need them.
            +Framework is providing functionality and structure that must be followed to use it.
        +Express default parameters:
            +1st parameter: request information, that express has turned into an object
                +query strings are found in req.query
                +req.params == .get('/r/:variable/:variable2;
                    +app.get('/r/:variable/:variable2', (req,res) => {
                        let { variable: test, variable2: id } = req.params;
                        res.send(`This is subreddit ${test} with ${id}`);
                    }
            +2nd parameter: response information, that express has turned into an object
            +.set('view engine', 'ejs'); sets views engine to ejs, which determines how express serves the views files.
            +.set('views', )
            +views: folder express looks for default that has html templates
            +
        +Routing: taking a request with a path and returning a response based on that path
        +nodeMon: node module that refreshes your server when you make changes to the files.
        +EJS: Embedded JavaScript is a module for express
    
    CRUD: Create, Read, Update, Delete

    RESTful Routing:
        +REST is a standard, RESTful is an application that follows REST
        +This is standard not enforced rules.
            +Get request: retrieves information.
                +Retrieves information
                +Data is sent via query string
                +Information is plainly visible in URL
                +Limit on amount of data sent
            +Post request: 
                +used to post data to server
                +used to write/create/update
                +data is sent via request body
                +can send any sort of data(JSON!)